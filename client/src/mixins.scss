@use "variables.scss" as *;

@mixin auth {
  z-index: 1;
  display: flex;
  justify-content: center;
  min-height: 650px;
  overflow: hidden;
  box-shadow: 4 8 30px rgba(#000, 0.2),
    inset -2px -2px 20px 50px rgba(#000, 0.9);
  border-radius: grid(2.5);
  box-sizing: border-box;
  width: clamp(200px, 95%, 1200px);

  .left,
  .right {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    width: 50%;
    padding: grid(10) grid(6);
    backdrop-filter: blur(4px) saturate(130%);
  }

  .left {
    width: 35%;
    justify-content: space-between;
    max-width: 500px;
    background: rgba($bgSecondary, 0.65);

    h1 {
      font-size: clamp(1.75rem, 10vw, 2.5rem);
      font-weight: 700;
      color: $textPrimary;
      margin-bottom: grid(1.5);
    }

    span.asRole {
      transition: opacity 0.2s ease-in-out;
      opacity: 0;
      display: block;
      font-size: 1.125rem;
      font-weight: 500;
      color: rgba($textPrimary, 0.85);
      margin-top: grid(1.5);

      &.visible {
        opacity: 1;
      }

      @media screen and (max-width: 768px) {
        display: none;
      }
    }

    p {
      margin-top: grid(2);
      span {
        display: inline-block;
        margin-top: $grid;
        line-break: none;
        color: #4717e1;
        cursor: pointer;
        transition: 0.15s linear;
        text-decoration: underline;
      }
    }
  }
  .right {
    flex: 1;
    backdrop-filter: blur(8px) saturate(130%);
    padding: grid(10) grid(8);
    background: rgba($bgSecondary, 0.75);
    justify-content: space-between;

    .input {
      @include input;
    }

    .form-controls {
      display: flex;
      flex-direction: column;
      flex: 1;
      justify-content: center;

      h2 {
        margin-bottom: grid(4);
      }
    }

    @include form;
  }

  @media screen and (max-width: 768px) {
    flex-direction: column;

    .left,
    .right {
      width: 100%;
      padding: grid(6) grid(4);
      flex: 1;
    }
    .left {
      max-width: 100%;
      padding: grid(6) grid(4) grid(4);
      flex: 0;
      height: auto;
    }
  }
}

@mixin input {
  position: relative;
  margin-bottom: grid(4);
  width: 100%;
  & > div {
    display: flex;
    gap: $grid;
    justify-content: space-between;
    align-items: center;
    padding: 0 0 $grid grid(2);

    span {
      display: block;
      color: rgba($textPrimary, 0.75);
      font-size: 0.875rem;
      font-weight: 600;

      &:nth-child(2) {
        font-weight: 400;
        color: rgba($error, 0.9);
      }
    }
  }

  input,
  textarea {
    @include text-input;
    &:is(textarea) {
      resize: vertical;
      min-height: grid(10);
      max-height: grid(20);
    }

    & + .length {
      position: absolute;
      right: 0;
      bottom: -1 * grid(3);
      color: rgba($textPrimary, 0.75);
      font-size: 0.75rem;
      font-weight: 600;
    }

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }

  &.disabled {
    opacity: 0.6;
    pointer-events: none;
  }
}

@mixin text-input {
  width: 100%;
  background: rgba($bgPrimary, 0.5);
  border: none;
  border-radius: $grid;
  padding: grid(2);
  color: $textPrimary;
  font-size: 1rem;
  font-weight: 500;
  appearance: textfield;
  font-family: "Urbanist", sans-serif;
}

@mixin form {
  .error {
    display: flex;
    gap: $grid;
    border-radius: $grid;
    padding: grid(1.5);
    color: $error;
    background: rgba($error, 0.1);
    max-height: $grid * 14;
    font-size: 0.875rem;
    font-weight: 500;
    transition: 0.3s ease-in-out;
    transition-property: scale, opacity;

    i-feather {
      flex-shrink: 0;
    }
    p {
      line-height: grid(3);
    }

    &.hidden {
      opacity: 0;
      scale: 0.5;
    }
  }

  .form-actions {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: grid(4);

    @media screen and (max-width: 500px) {
      flex-direction: column-reverse;
      gap: grid(2);

      button {
        width: 100%;
      }
    }
  }
}

@mixin button {
  cursor: pointer;
  font-family: "Urbanist", sans-serif;
  font-weight: 600;
  padding: $grid * 1.75 grid(4);
  font-size: 1rem;
  border: none;
  background: darken($primary, 0);
  color: $textPrimaryDark;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  border-radius: $grid;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: grid(1);
  transition: 0.15s linear;
  transition-property: color, background, scale;

  i-feather {
    width: grid(2.5) !important;
    height: grid(2.5) !important;
    flex-shrink: 0;
  }

  &:is(:hover, :focus) {
    background-color: darken($primary, 5);
  }

  &:active {
    scale: 0.95;
  }

  &.mobile-main {
    @media screen and (max-width: 768px) {
      position: fixed;
      bottom: grid(2);
      right: grid(2);
      z-index: 100;
      &:is(:has(i-feather), &.icon) {
        & > *:not(i-feather) {
          display: none;
        }
        border-radius: 50%;
        padding: grid(2);
      }
    }
  }

  &.secondary {
    background: $bgSecondary;
    color: $textPrimary;
    &:is(:hover, :focus) {
      background-color: darken($bgSecondary, 5);
    }
  }

  &.transparent {
    background: rgba($bgPrimary, 0.2);
    backdrop-filter: blur(2px);
    color: rgba($textPrimary, 0.8);
    &:is(:hover, :focus) {
      background-color: rgba($bgSecondary, 0.4);
    }
  }

  &.danger {
    background: $error;
    color: $textPrimaryDark;
    &:is(:hover, :focus) {
      background-color: darken($error, 5);
    }
  }

  &:disabled {
    color: $textSecondary;
    background: #c7c7c7;
    pointer-events: none;
  }
}

@mixin border-transition($height) {
  background: $bgSecondary;
  height: $height;
  position: relative;

  &::after {
    content: "";
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    background: $bgPrimary;
    border-radius: 0 0 $height $height;
  }
}
